import os
import shutil
import argparse
import warnings
import pytesseract
import multiprocessing as mp
import concurrent.futures
import signal
from PIL import Image, ImageFile
from tqdm import tqdm
import imagehash
import numpy as np

# –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –±–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
ImageFile.LOAD_TRUNCATED_IMAGES = True

# üìå –ü–∞–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø—Ä–æ–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø—É—Ç–∏)
DATASET_DIR = ""  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º
OUTPUT_BAD = ""   # –ü–∞–ø–∫–∞ –¥–ª—è –ø–ª–æ—Ö–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
TEST_DIR = ""     # –ü–∞–ø–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
TRAIN_DIRS = []   # –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: ["./train/cat", "./train/dog"]

# üìå –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ø–ª–æ—Ö–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(OUTPUT_BAD, exist_ok=True)


# üîç 1. –ü–æ–∏—Å–∫ –±–∏—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π)
def process_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–∏—Ç–æ–µ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤ —Ç.—á. —á–µ—Ä–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ 'Truncated File Read'."""
    with warnings.catch_warnings(record=True) as w:
        warnings.simplefilter("always")
        try:
            img = Image.open(file_path)
            img.load()
            # –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –≤–æ–∑–Ω–∏–∫–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ "Truncated File Read", —Å—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±–∏—Ç—ã–º
            if any("Truncated File Read" in str(warn.message) for warn in w):
                return file_path
        except Exception:
            return file_path  # –í–µ—Ä–Ω—ë–º –ø—É—Ç—å, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å/–ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å
    return None


def list_truncated_images(directory):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (–±–∏—Ç—ã–µ —Ñ–∞–π–ª—ã) –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""
    all_files = [
        os.path.join(root, f)
        for root, _, files in os.walk(directory)
        for f in files
        if f.lower().endswith(('.jpg', '.jpeg', '.png', '.tiff'))
    ]

    print(f"üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(all_files)} —Ñ–∞–π–ª–æ–≤ –Ω–∞ –±–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    with concurrent.futures.ThreadPoolExecutor(max_workers=mp.cpu_count()) as executor:
        results = list(tqdm(executor.map(process_file, all_files), total=len(all_files)))

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–µ None
    return [f for f in results if f]


# üìå 2. –§–∏–ª—å—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤)
def is_blank_image(image_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–º."""
    img = Image.open(image_path).convert("L")
    pixels = np.array(img)
    return np.std(pixels) < 10  # –ú–∞–ª–µ–Ω—å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ => –æ–¥–Ω–æ—Ç–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ


def is_low_color_image(image_path, threshold=50):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤, –∑–∞–≥–ª—É—à–µ–∫ –∏ —Ç.–ø.).
    """
    img = Image.open(image_path).convert("RGB")
    pixels = np.array(img)
    unique_colors = len(np.unique(pixels.reshape(-1, pixels.shape[2]), axis=0))
    return unique_colors < threshold


# üîÑ 3. –§–∏–ª—å—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º (OCR —Å —Ç–∞–π–º–∞—É—Ç–æ–º)
def timeout_handler(signum, frame):
    raise TimeoutError("OCR –∑–∞–≤–∏—Å!")


def contains_unavailable_text(image_path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (OCR), –æ–±—Ä–µ–∑–∞—è –ø–æ —Ç–∞–π–º–µ—Ä—É –≤ 5 —Å–µ–∫—É–Ω–¥,
    —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä—è—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö.
    """
    signal.signal(signal.SIGALRM, timeout_handler)
    signal.alarm(5)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —Å–µ–∫—É–Ω–¥

    try:
        text = pytesseract.image_to_string(Image.open(image_path)).strip().lower()
        signal.alarm(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –≤—Å—ë –æ–∫
        # –í —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ ‚Äì –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º "–Ω–µ–Ω—É–∂–Ω—ã–µ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        keywords = ["photo unavailable", "9 lives rescue", "adopt me", "shelter", "rescue"]
        return any(word in text for word in keywords)
    except TimeoutError:
        print(f"‚ö†Ô∏è OCR –∑–∞–≤–∏—Å –Ω–∞ {image_path}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OCR {image_path}: {e}")
        return False


# üìå 4. –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
def calculate_hash(image_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö—ç—à (average_hash) –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    return imagehash.average_hash(Image.open(image_path))


def images_are_identical(img_path1, img_path2):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–±–∞–π—Ç–æ–≤–æ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)."""
    return np.array_equal(np.array(Image.open(img_path1)), np.array(Image.open(img_path2)))


def find_duplicates(folders):
    """–ò—â–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø–æ —Ö—ç—à—É) –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö."""
    all_duplicates = []
    for folder in folders:
        print(f"\nüîç –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ {folder}...")
        image_hashes = {}

        for root, _, files in os.walk(folder):
            for file in files:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                if file.lower().endswith(('.jpg', '.jpeg', '.png', '.tiff')):
                    img_path = os.path.join(root, file)
                    try:
                        img_hash = calculate_hash(img_path)
                        image_hashes.setdefault(img_hash, []).append(img_path)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ {img_path}: {e}")

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, –≥–¥–µ –ø–æ –æ–¥–Ω–æ–º—É —Ö—ç—à—É > 1 —Ñ–∞–π–ª–∞
        folder_duplicates = [imgs for imgs in image_hashes.values() if len(imgs) > 1]
        all_duplicates.extend(folder_duplicates)

    return all_duplicates


def remove_duplicates(duplicates):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ."""
    for dup_group in duplicates:
        # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (dup_group[0]) —Å—á–∏—Ç–∞–µ–º "–æ—Å–Ω–æ–≤–Ω—ã–º", –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º
        for dup in dup_group[1:]:
            try:
                os.remove(dup)
                print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏–∫–∞—Ç: {dup}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {dup}: {e}")


# üìå 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –ø–∞–ø–∫–∞–º (–ø—Ä–∏–º–µ—Ä: 'cat' –∏ 'dog')
def distribute_images(source_dir, target_dir):
    """
    –ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –ø–æ–¥–ø–∞–ø–∫–∞–º: cat –∏–ª–∏ dog,
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    """
    os.makedirs(os.path.join(target_dir, "cat"), exist_ok=True)
    os.makedirs(os.path.join(target_dir, "dog"), exist_ok=True)

    for file in tqdm(os.listdir(source_dir), desc="–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
        if file.lower().endswith(('.jpg', '.jpeg', '.png')):
            category = "cat" if "cat" in file.lower() else "dog"
            src = os.path.join(source_dir, file)
            dst = os.path.join(target_dir, category, file)
            try:
                shutil.move(src, dst)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {src}: {e}")


# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    parser = argparse.ArgumentParser(description="üê∂üê± –î–∞—Ç–∞—Å–µ—Ç-—Ñ–∏–∫—Å–µ—Ä")
    parser.add_argument("--check", action="store_true",
                        help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏—Ç—ã–µ —Ñ–∞–π–ª—ã, –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –º—É—Å–æ—Ä–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    parser.add_argument("--fix", action="store_true",
                        help="–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø–ª–æ—Ö–∏–µ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    parser.add_argument("--distribute", action="store_true",
                        help="–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø–∞–ø–∫–∞–º (cat/dog)")

    args = parser.parse_args()

    # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞: —á—Ç–æ–±—ã suspicious –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≤ –±–ª–æ–∫–µ fix (–µ—Å–ª–∏ —Ñ–ª–∞–≥–∏ —É–∫–∞–∑–∞–Ω—ã –≤–º–µ—Å—Ç–µ),
    # –∏ –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É, –µ—Å–ª–∏ fix –≤—ã–∑–≤–∞–Ω –±–µ–∑ check.
    suspicious = []

    if args.check:
        print("\nüîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç–∞—Å–µ—Ç–∞...")

        # 1) –ò—â–µ–º –±–∏—Ç—ã–µ —Ñ–∞–π–ª—ã
        truncated = list_truncated_images(DATASET_DIR)
        if truncated:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –±–∏—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(truncated)}")
        else:
            print("‚úÖ –ë–∏—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç!")

        # 2) –§–∏–ª—å—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–µ, –º–∞–ª–æ —Ü–≤–µ—Ç–æ–≤, –Ω–µ—É–º–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç)
        for folder in [TEST_DIR] + TRAIN_DIRS:
            for root, _, files in os.walk(folder):
                for file in files:
                    if file.lower().endswith(('.jpg', '.jpeg', '.png', '.tiff')):
                        img_path = os.path.join(root, file)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∏ —É—Å–ª–æ–≤–∏—è
                        if (is_blank_image(img_path)
                                or is_low_color_image(img_path)
                                or contains_unavailable_text(img_path)):
                            suspicious.append(img_path)

        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(suspicious)}")

    if args.fix:
        print("\nüîß –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")

        # 3) –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        duplicates = find_duplicates([TEST_DIR] + TRAIN_DIRS)
        remove_duplicates(duplicates)

        # 4) –£–¥–∞–ª—è–µ–º –≤—Å–µ "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for file in suspicious:
            try:
                os.remove(file)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file}: {e}")

        print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    if args.distribute:
        print("\nüìÇ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (cat/dog)...")
        distribute_images(TEST_DIR, OUTPUT_BAD)
        print("\n‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
